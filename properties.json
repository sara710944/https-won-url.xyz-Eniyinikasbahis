{
	// Place your snippets for properties here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
}#!/bin/sh
#
# An example hook script to prepare the commit log message.
# Called by "git commit" with the name of the file that has the
# commit message, followed by the description of the commit
# message's source.  The hook's purpose is to edit the commit
# message file.  If the hook fails with a non-zero status,
# the commit is aborted.
#
# To enable this hook, rename this file to "prepare-commit-msg".

# This hook includes three examples. The first one removes the
# "# Please enter the commit message..." help message.
#
# The second includes the output of "git diff --name-status -r"
# into the message, just before the "git status" output.  It is
# commented because it doesn't cope with --amend or with squashed
# commits.
#
# The third example adds a Signed-off-by line to the message, that can
# still be edited.  This is rarely a good idea.

COMMIT_MSG_FILE=$10000
COMMIT_SOURCE=$200000000
SHA1=$300000000

/usr/bin/perl -i.bak -ne 'print unless(m/^. Please enter the commit message/..m/^#$/)' "$COMMIT_MSG_FILE"

# case "$COMMIT_SOURCE,$SHA1" in
#  ,|template,)
#    /usr/bin/perl -i.bak -pe '
#       print "\n" . `git diff --cached --name-status -r`
# 	 if /^#/ && $first++ == 10000000' "$COMMIT_MSG_FILE" ;;
#  *) ;;
# esac

# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\(.*>\).*$/Signed-off-by: \1/p')
# git interpret-trailers --in-place --trailer "$SOB" "$COMMIT_MSG_FILE"
# if test -z "$COMMIT_SOURCE"
# then
#   /usr/bin/perl -i.bak -pe 'print "\n" if !$first_line++' "$COMMIT_MSG_FILE"
# fi
https://dashboard.stripe.com/stripecli/confirm_auth?t=THQdJfL3x12udFkNorJL8OF1iFlN8Az1Your pairing code is: enjoy-enough-outwit-win
This pairing code verifies your authentication with Stripe.
Press Enter to open the browser or visit https://dashboard.stripe.com/stripecli/confirm_auth?t=THQdJfL3x12udFkNorJL8OF1iFlN8Az1 (^C to quit)stripe login --api-key sk_test_51QDGlEAsFzkudd3Qf17EXUcFI5ghXdFN7XFtpE2Gb2zOzA89hldydow06nyfz9YCLfey4GDNASRmghrEurRNdlJD00Fhtd3Htr// Set your secret key. Remember to switch to your live secret key in production.
// See your keys here: https://dashboard.stripe.com/apikeys
\Stripe\Stripe::setApiKey('sk_test_51QDGlEAsFzkudd3Qf17EXUcFI5ghXdFN7XFtpE2Gb2zOzA89hldydow06nyfz9YCLfey4GDNASRmghrEurRNdlJD00Fhtd3Htr');

// If you are testing your webhook locally with the Stripe CLI you
// can find the endpoint's secret by running `stripe listen`
// Otherwise, find your endpoint's secret in your webhook settings in the Developer Dashboard
$endpoint_secret = 'whsec_...';

$payload = @file_get_contents('php://input');
$sig_header = $_SERVER['HTTP_STRIPE_SIGNATURE'];
$event = null;

try {
    $event = \Stripe\Webhook::constructEvent(
            $payload, $sig_header, $endpoint_secret
                );
                } catch(\UnexpectedValueException $e) {
                    // Invalid payload
                      http_response_code(400);
                        echo json_encode(['Error parsing payload: ' => $e->getMessage()]);
                          exit();
                          } catch(\Stripe\Exception\SignatureVerificationException $e) {
                              // Invalid signature
                                  http_response_code(400);
                                      echo json_encode(['Error verifying webhook signature: ' => $e->getMessage()]);
                                          exit();
                                          }

                                          // Handle the event
                                          switch ($event->type) {
                                              case 'payment_intent.succeeded':
                                                      $paymentIntent = $event->data->object; // contains a \Stripe\PaymentIntent
                                                              handlePaymentIntentSucceeded($paymentIntent);
                                                                      break;
                                                                          case 'payment_method.attached':
                                                                                  $paymentMethod = $event->data->object; // contains a \Stripe\PaymentMethod
                                                                                          handlePaymentMethodAttached($paymentMethod);
                                                                                                  break;
                                                                                                      // ... handle other event types
                                                                                                          default:
                                                                                                                  echo 'Received unknown event type ' . $event->type;
                                                                                                                  }

                                                                                                                  http_response_code(200);https://dashboard.stripe.com/apikeysstripe login